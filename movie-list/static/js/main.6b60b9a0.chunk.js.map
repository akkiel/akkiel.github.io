{"version":3,"sources":["Pages/Navigation.jsx","Services/OmdbServices.jsx","Services/FirebaseServices.jsx","Pages/Search.jsx","Store/Actions.jsx","Store/Constants.js","Pages/List.jsx","App.js","serviceWorker.js","Store/Reducer.js","Store/Store.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","reactstrap_es","color","light","expand","href","onClick","navbar","className","Link","to","nav","inNavbar","caret","right","divider","React","Component","Services_OmdbServices","apiKey","imdb","require","movieTitle","get","name","timeout","movieID","id","searchTerm","search","Services_FirebaseServices","FirebaseServices","config","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initialize","db","firebase","movie","seen","ref","title","set","once","provider","signInWithPopup","then","result","credential","accessToken","user","catch","error","code","message","email","Search","_React$Component","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","concat","selectMovie","OmdbServices","getMovieById","imdbid","selected","toggleModal","modal","addToList","addMovieToDataBase","inherits","createClass","key","value","results","_this2","displayResults","react","map","index","src","poster","alt","year","onSubmit","event","preventDefault","searchMovies","movies","style","maxWidth","type","placeholder","onChange","target","plot","loadMovies","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","getMovies","payload","val","t0","stop","_x","List","filterList","updatedList","values","filter","item","toLowerCase","items","sortListString","sortKey","sort","b","localeCompare","sortListNumber","renderMovie","listType","renderCard","renderTableRow","display","position","width","height","fontSize","scope","rating","list","_this3","movieList","setList","data","size","bordered","striped","hover","connect","bindActionCreators","App","GoogleAuthProvider","console","log","firebaseService","signIn","includes","Navigation_Navigation","Switch","Route","exact","path","component","Redirect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","rootReducer","undefined","action","objectSpread","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","basename","process","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6b60b9a0.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from 'reactstrap';\nimport { Link } from \"react-router-dom\";\n\nexport default class Navigation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"light\" light expand=\"md\">\n                    <NavbarBrand href=\"/\">movie-list</NavbarBrand>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <Link to='/movie-list/movieList' className='nav-link'>My Movies</Link>\n                            </NavItem>\n                            <NavItem>\n                                <Link to='/movie-list/search' className='nav-link'>Search</Link>\n                            </NavItem>\n                            <UncontrolledDropdown nav inNavbar>\n                                <DropdownToggle nav caret>\n                                    Options\n                                </DropdownToggle>\n                                <DropdownMenu right>\n                                    <DropdownItem>\n                                        Option 1\n                                    </DropdownItem>\n                                    <DropdownItem>\n                                        Option 2\n                                    </DropdownItem>\n                                    <DropdownItem divider/>\n                                    <DropdownItem>\n                                        Reset\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledDropdown>\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}","class OmdbServices {\n    apiKey = \"d52d4b2d\";\n    imdb = require('imdb-api');\n\n    getMovieByName(movieTitle) {\n        return this.imdb.get({name: movieTitle}, {apiKey: this.apiKey, timeout: 30000});\n    }\n\n    getMovieById(movieID) {\n        return this.imdb.get({id: movieID}, {apiKey: this.apiKey});\n    }\n\n    searchMovies(searchTerm) {\n        return this.imdb.search({name: searchTerm}, {apiKey: this.apiKey});\n    }\n\n}\n\nexport default new OmdbServices();","import * as firebase from \"firebase\";\n\nclass FirebaseServices {\n    config = {\n        apiKey: \"AIzaSyBfzmtoPfA9zIfoyyGxyqRF3zaIoyI2MUM\",\n        authDomain: \"movielist-909a6.firebaseapp.com\",\n        databaseURL: \"https://movielist-909a6.firebaseio.com\",\n        projectId: \"movielist-909a6\",\n        storageBucket: \"movielist-909a6.appspot.com\",\n        messagingSenderId: \"545170456229\"\n    };\n    db;\n\n    constructor() {\n        this.initialize();\n        this.db = firebase.database();\n    }\n\n    initialize() {\n        firebase.initializeApp(this.config);\n    }\n\n    addMovieToDataBase(movie, seen) {\n        movie.seen = seen || false;\n        return this.db.ref('/movies/' + movie.title).set(movie);\n    }\n\n    getMovies() {\n        return this.db.ref('/movies/').once('value');\n    }\n\n    signIn(provider) {\n        return firebase.auth().signInWithPopup(provider).then((result) => {\n            // This gives you a Google Access Token. You can use it to access the Google API.\n            var token = result.credential.accessToken;\n            // The signed-in user info.\n            var user = result.user;\n            // ...\n            return user;\n        }).catch(function (error) {\n            // Handle Errors here.\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            // The email of the user's account used.\n            var email = error.email;\n            // The firebase.auth.AuthCredential type that was used.\n            var credential = error.credential;\n            // ...\n        });\n    }\n\n}\n\nexport default new FirebaseServices()","import * as React from 'react';\nimport OmdbServices from \"../Services/OmdbServices\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardImg,\n    CardSubtitle,\n    CardText,\n    CardTitle,\n    Form,\n    FormGroup,\n    Input,\n    Modal, ModalBody, ModalFooter, ModalHeader\n} from \"reactstrap\";\nimport FirebaseServices from \"../Services/FirebaseServices\";\n\n\nexport class Search extends React.Component<> {\n\n    componentWillMount() {\n        //OmdbServices.getMovieByName('Clash of The Titans').then(m => FirebaseServices.addMovieToDataBase(m));\n        this.setState({\n            results: [],\n            selected: {},\n            modal: false\n        });\n    }\n\n    selectMovie = (movie) => {\n        OmdbServices.getMovieById(movie.imdbid).then((movie) => {\n            this.setState({\n                selected: movie\n            });\n            this.toggleModal();\n        });\n    };\n\n    toggleModal = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    addToList = (seen) => {\n        FirebaseServices.addMovieToDataBase(this.state.selected, seen).then(\n            () => {\n                this.toggleModal()\n            }\n        );\n    };\n\n    render() {\n        let searchTerm = \"\";\n        const handleChange = (event) => {\n            searchTerm = event.target.value;\n        };\n        const handleSubmit = (event) => {\n            event.preventDefault();\n            OmdbServices.searchMovies(searchTerm).then((movies) => {\n                this.setState({results: movies.results});\n            });\n        };\n        const displayResults = (\n            <div className=\"row\">\n                {\n                    this.state.results.map((movie, index) => {\n                            return (\n                                <div key={index} className=\"col-lg-2 col-md-4 col-sm-8 m-4 rounded\">\n                                    <Card onClick={this.selectMovie.bind(this, movie)}>\n                                        <CardImg\n                                            src={movie.poster}\n                                            alt={movie.title}/>\n                                        <CardBody>\n                                            <CardTitle>{movie.title}</CardTitle>\n                                            <CardSubtitle>{movie.year}</CardSubtitle>\n                                        </CardBody>\n                                    </Card>\n                                </div>\n                            )\n                        }\n                    )\n                }\n            </div>\n        );\n\n        return (\n            <div>\n                <Form onSubmit={handleSubmit}>\n                    <FormGroup>\n                        <Input style={{maxWidth: '400px'}} type=\"text\" name=\"search\"\n                               placeholder=\"Search Key...\" onChange={handleChange}/>\n                    </FormGroup>\n                </Form>\n                {displayResults}\n                <div>\n                    {/*<Button className='hidden' color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button>*/}\n                    <Modal isOpen={this.state.modal} toggle={this.toggleModal} className={this.props.className}>\n                        <ModalHeader\n                            toggle={this.toggleModal}>{this.state.selected.title + \"  (\" + this.state.selected.year + \")\"}</ModalHeader>\n                        <ModalBody>\n                            {this.state.selected.plot}\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"success\" onClick={this.addToList.bind(this, true)}>SEEN IT!!</Button>\n                            {' '}\n                            <Button color=\"primary\" onClick={this.addToList.bind(this, false)}>Add To List</Button>\n                            {' '}\n                            <Button color=\"secondary\" onClick={this.toggleModal}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n\n}","import { LOAD_MOVIES } from \"./Constants\";\nimport FirebaseServices from \"../Services/FirebaseServices\";\n\n\nexport const loadMovies = () => {\n    return async (dispatch) => {\n        try {\n            await FirebaseServices.getMovies().then((movies) =>\n                dispatch({type: LOAD_MOVIES, payload: movies.val()}));\n        } catch (err) {\n            dispatch({type: LOAD_MOVIES, payload: []});\n        }\n    }\n};","export const LOAD_MOVIES = \"LAOD_MOVIES\";","import * as React from \"react\";\nimport OmdbServices from \"../Services/OmdbServices\";\nimport FirebaseServices from \"../Services/FirebaseServices\";\nimport { connect } from \"react-redux\";\nimport { loadMovies } from \"../Store/Actions\";\nimport { bindActionCreators } from 'redux';\nimport {\n    Card, CardImg, CardBody,\n    CardTitle, CardSubtitle, Badge, Form, Input, Button, ButtonGroup, Modal, ModalHeader, ModalBody, ModalFooter, Table\n} from 'reactstrap';\n\n\nclass List extends React.Component<> {\n    componentWillMount() {\n        this.setState({\n            items: null,\n            list: 'list',\n            listType: 'thumbnail',\n            selected: {},\n            modal: false\n        });\n        this.props.getMovies().then(() => {\n            this.setState({\n                items: Object.values(this.props.movies)\n            });\n        });\n    }\n\n    filterList = (event) => {\n        let updatedList = Object.values(this.props.movies);\n        updatedList = updatedList.filter((item) => {\n            return item.title.toLowerCase().search(\n                event.target.value.toLowerCase()) !== -1;\n        });\n        this.setState({items: updatedList});\n    };\n\n    sortListString = (sortKey) => {\n        debugger;\n        const items = this.state.items;\n        items.sort((a, b) => a[sortKey].localeCompare(b[sortKey]))\n        this.setState({items})\n    };\n\n    sortListNumber = (sortKey) => {\n        const items = this.state.items;\n        items.sort((a, b) => b[sortKey] - a[sortKey])\n        this.setState({items})\n    };\n\n    selectMovie = (movie) => {\n        OmdbServices.getMovieById(movie.imdbid).then((movie) => {\n            this.setState({\n                selected: movie\n            });\n            this.toggleModal();\n        });\n    };\n\n    addToList = (seen) => {\n        FirebaseServices.addMovieToDataBase(this.state.selected, seen).then(\n            () => {\n                this.toggleModal();\n                this.props.getMovies().then(() => {\n                    this.setState({\n                        items: Object.values(this.props.movies)\n                    });\n                });\n            }\n        );\n\n    };\n\n    toggleModal = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    renderMovie = (movie, index) => {\n        if (this.state.listType === 'thumbnail') {\n            return this.renderCard(movie, index);\n        } else if (this.state.listType === 'table') {\n            return this.renderTableRow(movie, index)\n        } else {\n            return <div key={index} style={{display: 'none'}}/>;\n        }\n    };\n\n    renderCard = (movie, index) => {\n        return (\n            <div key={index} className=\"col-lg-2 col-md-4 col-sm-8 m-4 rounded\">\n                <Card onClick={this.selectMovie.bind(this, movie)}>\n                    {movie.seen ? <Badge style={{\n                        position: \"absolute\",\n                        width: \"100%\",\n                        height: \"6%\",\n                        fontSize: \"100%\"\n                    }} color=\"success\">Watched</Badge> : null}\n                    <CardImg\n                        src={movie.poster}\n                        alt={movie.title}/>\n                    <CardBody>\n                        <CardTitle>{movie.title}</CardTitle>\n                        <CardSubtitle>{movie.year}</CardSubtitle>\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    };\n\n    renderTableRow = (movie, index) => {\n        return (\n            <tr key={index}>\n                <th scope=\"row\">{index}</th>\n                <td>{movie.title}</td>\n                <td>{movie.seen}</td>\n                <td>{movie.rating}</td>\n            </tr>\n        );\n    };\n\n    render() {\n        const movieList = this.state.items && this.state.items.map((movie, index) => {\n            if (this.state.list === 'list') {\n                return this.renderMovie(movie, index);\n            } else if (this.state.list === 'toWatch' && !movie.seen) {\n                return this.renderCard(movie, index);\n            } else if (this.state.list === 'seen' && movie.seen) {\n                return this.renderCard(movie, index)\n            } else {\n                return <div key={index} style={{display: 'none'}}/>;\n            }\n        });\n\n        const setList = (data) => {\n            this.setState(data);\n        };\n\n        return (\n            <div>\n                <Form>\n                    <Input style={{maxWidth: '400px'}} type=\"text\" placeholder=\"Filter...\"\n                           onChange={this.filterList.bind(this)}/>\n                </Form>\n                <ButtonGroup size=\"lg\">\n                    <Button onClick={setList.bind(this, {listType: 'thumbnail'})}>thumbnails</Button>\n                    <Button onClick={setList.bind(this, {listType: 'table'})}>table list</Button>\n                </ButtonGroup>\n                <ButtonGroup size=\"lg\">\n                    <Button onClick={setList.bind(this, {list: 'list'})}>Movie List</Button>\n                    <Button onClick={setList.bind(this, {list: 'seen'})}>Seen List</Button>\n                    <Button onClick={setList.bind(this, {list: 'toWatch'})}>To Watch List</Button>\n                </ButtonGroup>\n                <div className=\"row\">\n                    {this.state.listType === 'table' ?\n                        <Table bordered striped hover>\n                            <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Movie Title</th>\n                                <th>Last Name</th>\n                                <th onClick={this.sortListNumber.bind(this, 'rating')}>rating</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {movieList}\n                            </tbody>\n                        </Table> : movieList}\n                </div>\n                <div>\n                    <Modal isOpen={this.state.modal} toggle={this.toggleModal} className={this.props.className}>\n                        <ModalHeader\n                            toggle={this.toggleModal}>{this.state.selected.title + \"  (\" + this.state.selected.year + \")\"}</ModalHeader>\n                        <ModalBody>\n                            {this.state.selected.plot}\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"success\" onClick={this.addToList.bind(this, true)}>SEEN IT!!</Button>\n                            {' '}\n                            <Button color=\"secondary\" onClick={this.toggleModal}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        movies: state.movies\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getMovies: bindActionCreators(loadMovies, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List)","import React from 'react';\nimport './App.css';\nimport Navigation from './Pages/Navigation'\nimport { Search } from \"./Pages/Search\";\nimport { Redirect, Route, Switch } from 'react-router';\nimport List from './Pages/List';\nimport * as firebase from 'firebase';\nimport firebaseService from './Services/FirebaseServices'\n\nclass App extends React.Component {\n    state = {\n        provider: null,\n        user: null\n    };\n\n    constructor(props) {\n        super(props);\n        this.state.provider = new firebase.auth.GoogleAuthProvider();\n    }\n\n\n    componentWillMount() {\n        console.log('component mounting');\n        const myuser = firebaseService.signIn(this.state.provider);\n        myuser.then((user) => {\n            const allowedUsers = [\n                'adamkiel@granular.ag',\n                'kieladamk@gmail.com',\n                'jamiewichhart@gmail.com',\n                'adamjamiekiel@gmail.com'\n            ];\n            if (allowedUsers.includes(user.email)) {\n                this.setState({\n                    user: user\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                {this.state.user ?\n                    <div>\n                        <Navigation/>\n                        <Switch>\n                            <Route exact path=\"/movie-list/movieList\" component={List}/>\n                            <Route exact path=\"/movie-list/search\" component={Search}/>\n                            <Redirect to='/movie-list/movieList'/>\n                        </Switch>\n                    </div>\n                    : null\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOAD_MOVIES } from \"./Constants\";\n\nconst initialState = {\n    movies: {}\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD_MOVIES:\n            return {...state, movies: action.payload};\n        default:\n            return state;\n    }\n};\nexport default rootReducer;","import rootReducer from \"./Reducer\";\nimport { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from \"react-redux\";\nimport store from \"./Store/Store\";\nimport { BrowserRouter } from 'react-router-dom';\n\nconst basename = `${process.env.PUBLIC_URL}`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={basename}>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}