{"version":3,"sources":["Pages/Navigation.jsx","Services/OmdbServices.jsx","Pages/Search.jsx","Services/FirebaseServices.jsx","Store/Actions.jsx","Store/Constants.js","Pages/List.jsx","App.js","serviceWorker.js","Store/Reducer.js","Store/Store.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","reactstrap_es","color","light","expand","href","onClick","navbar","className","Link","to","nav","inNavbar","caret","right","divider","React","Component","Services_OmdbServices","apiKey","imdb","require","movieTitle","get","name","timeout","movieID","id","searchTerm","search","Search","_React$Component","apply","arguments","inherits","createClass","key","value","results","event","preventDefault","console","log","getResults","react","map","movie","index","src","poster","alt","title","year","onSubmit","OmdbServices","searchMovies","then","movies","style","maxWidth","type","placeholder","onChange","target","Services_FirebaseServices","FirebaseServices","config","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initialize","db","firebase","seen","ref","set","once","loadMovies","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","getMovies","payload","val","t0","stop","_x","List","goToMovie","history","push","items","getMovieByName","m","addMovieToDataBase","_this2","movieList","keys","position","width","height","fontSize","connect","bindActionCreators","App","Navigation_Navigation","Switch","Route","exact","path","component","Redirect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","rootReducer","length","undefined","action","objectSpread","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","basename","concat","process","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4af7d670.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from 'reactstrap';\nimport { Link } from \"react-router-dom\";\n\nexport default class Navigation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"light\" light expand=\"md\">\n                    <NavbarBrand href=\"/\">movie-list</NavbarBrand>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <Link to='/movie-list/movieList' className='nav-link'>My Movies</Link>\n                            </NavItem>\n                            <NavItem>\n                                <Link to='/movie-list/search' className='nav-link'>Search</Link>\n                            </NavItem>\n                            <UncontrolledDropdown nav inNavbar>\n                                <DropdownToggle nav caret>\n                                    Options\n                                </DropdownToggle>\n                                <DropdownMenu right>\n                                    <DropdownItem>\n                                        Option 1\n                                    </DropdownItem>\n                                    <DropdownItem>\n                                        Option 2\n                                    </DropdownItem>\n                                    <DropdownItem divider/>\n                                    <DropdownItem>\n                                        Reset\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledDropdown>\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}","class OmdbServices {\n    apiKey = \"d52d4b2d\";\n    imdb = require('imdb-api');\n\n    getMovieByName(movieTitle) {\n        return this.imdb.get({name: movieTitle}, {apiKey: this.apiKey, timeout: 30000});\n    }\n\n    getMovieById(movieID) {\n        return this.imdb.get({id: movieID}, {apiKey: this.apiKey});\n    }\n\n    searchMovies(searchTerm) {\n        return this.imdb.search({name: searchTerm}, {apiKey: this.apiKey});\n    }\n\n}\n\nexport default new OmdbServices();","import * as React from 'react';\nimport OmdbServices from \"../Services/OmdbServices\";\nimport { CardBody, CardImg, CardSubtitle, CardText, CardTitle, Form, FormGroup, Input } from \"reactstrap\";\nimport { Card } from \"reactstrap\";\n\nexport class Search extends React.Component<> {\n\n    componentWillMount() {\n        //OmdbServices.getMovieByName('Clash of The Titans').then(m => FirebaseServices.addMovieToDataBase(m));\n        this.setState({\n            results: []\n        });\n    }\n\n    searchSubmit(event) {\n        event.preventDefault();\n        console.log(event);\n        return false;\n    };\n\n    render() {\n        let searchTerm = \"\";\n        const handleChange = (event) => {\n            searchTerm = event.target.value;\n        };\n        const handleSubmit = (event) => {\n            event.preventDefault();\n            OmdbServices.searchMovies(searchTerm).then((movies) => {\n                this.setState({results: movies.results});\n            });\n        };\n        const getResults = (\n            <div className=\"row\">\n                {this.state.results.map((movie, index) => {\n                    return (<div key={index} className=\"col-lg-2 col-md-4 col-sm-8 m-4 rounded\">\n                        <Card>\n                            <CardImg\n                                src={movie.poster}\n                                alt={movie.title}/>\n                            <CardBody>\n                                <CardTitle>{movie.title}</CardTitle>\n                                <CardSubtitle>{movie.year}</CardSubtitle>\n                                <CardText>short summary?</CardText>\n                            </CardBody>\n                        </Card>\n                    </div>)\n                })}\n            </div>\n        );\n\n        return (\n            <div>\n                <Form onSubmit={handleSubmit}>\n                    <FormGroup>\n                        <Input style={{maxWidth: '400px'}} type=\"text\" name=\"search\"\n                               placeholder=\"Search Key...\" onChange={handleChange}/>\n                    </FormGroup>\n                </Form>\n                {getResults}\n            </div>\n        );\n    }\n\n}","import * as firebase from \"firebase\";\n\nclass FirebaseServices {\n    config = {\n        apiKey: \"AIzaSyBfzmtoPfA9zIfoyyGxyqRF3zaIoyI2MUM\",\n        authDomain: \"movielist-909a6.firebaseapp.com\",\n        databaseURL: \"https://movielist-909a6.firebaseio.com\",\n        projectId: \"movielist-909a6\",\n        storageBucket: \"movielist-909a6.appspot.com\",\n        messagingSenderId: \"545170456229\"\n    };\n    db;\n\n    constructor() {\n        this.initialize();\n        this.db = firebase.database();\n    }\n\n    initialize() {\n        firebase.initializeApp(this.config);\n    }\n\n    addMovieToDataBase(movie) {\n        movie.seen = false;\n        this.db.ref('/movies/' + movie.title).set(\n            movie\n        )\n    }\n\n    getMovies() {\n        return this.db.ref('/movies/').once('value');\n    }\n}\n\nexport default new FirebaseServices()","import { LOAD_MOVIES } from \"./Constants\";\nimport FirebaseServices from \"../Services/FirebaseServices\";\n\n\nexport const loadMovies = () => {\n    return async (dispatch) => {\n        try {\n            await FirebaseServices.getMovies().then((movies) =>\n                dispatch({type: LOAD_MOVIES, payload: movies.val()}));\n        } catch (err) {\n            dispatch({type: LOAD_MOVIES, payload: []});\n        }\n    }\n};","export const LOAD_MOVIES = \"LAOD_MOVIES\";","import * as React from \"react\";\nimport OmdbServices from \"../Services/OmdbServices\";\nimport FirebaseServices from \"../Services/FirebaseServices\";\nimport { connect } from \"react-redux\";\nimport { loadMovies } from \"../Store/Actions\";\nimport { bindActionCreators } from 'redux';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle, Badge\n} from 'reactstrap';\n\n\nclass List extends React.Component<> {\n    componentWillMount() {\n        // this.trial();\n        this.props.getMovies();\n        this.setState({\n            items: this.props.movies\n        });\n    }\n\n    async trial() {\n        const movie = await OmdbServices.getMovieByName('Shrek').then(m => m);\n        console.log(movie);\n        await FirebaseServices.addMovieToDataBase(movie);\n    }\n\n    goToMovie = (movie) => {\n        this.props.history.push(`/movies/movie`);\n    };\n\n\n    render() {\n        const movieList = Object.keys(this.props.movies).map((key, index) => {\n            const movie = this.props.movies[key];\n            return (\n                <div key={index} className=\"col-lg-2 col-md-4 col-sm-8 m-4 rounded\">\n                    <Card>\n                        {movie.seen ? <Badge style={{\n                            position: \"absolute\",\n                            width: \"100%\",\n                            height: \"6%\",\n                            fontSize: \"100%\"\n                        }} color=\"success\">Watched</Badge> : null}\n                        <CardImg\n                            src={movie.poster}\n                            alt={movie.title}/>\n                        <CardBody>\n                            <CardTitle>{movie.title}</CardTitle>\n                            <CardSubtitle>{movie.year}</CardSubtitle>\n                            <CardText>short summary?</CardText>\n                        </CardBody>\n                    </Card>\n                </div>\n            );\n        });\n\n\n        return (\n            <div>\n                <form>\n                    <input type=\"text\" placeholder=\"Filter...\"/>\n                </form>\n                <div className=\"row\">\n                    {movieList}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        movies: state.movies\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getMovies: bindActionCreators(loadMovies, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List)","import React from 'react';\nimport './App.css';\nimport Navigation from './Pages/Navigation'\nimport { Search } from \"./Pages/Search\";\nimport { Redirect, Route, Switch } from 'react-router';\nimport List from './Pages/List';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Navigation/>\n                <Switch>\n                    <Route exact path=\"/movie-list/movieList\" component={List}/>\n                    <Route exact path=\"/movie-list/search\" component={Search}/>\n                    <Redirect to='/movie-list/movieList'/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOAD_MOVIES } from \"./Constants\";\n\nconst initialState = {\n    movies: {}\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD_MOVIES:\n            return {...state, movies: action.payload};\n        default:\n            return state;\n    }\n};\nexport default rootReducer;","import rootReducer from \"./Reducer\";\nimport { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from \"react-redux\";\nimport store from \"./Store/Store\";\nimport { BrowserRouter } from 'react-router-dom'\n\nconst basename = `${process.env.PUBLIC_URL}`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={basename}>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}