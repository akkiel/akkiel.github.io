{"version":3,"sources":["Pages/Navigation.jsx","Services/OmdbServices.jsx","Services/FirebaseServices.jsx","Pages/Search.jsx","Store/Actions.jsx","Store/Constants.js","Pages/List.jsx","App.js","serviceWorker.js","Store/Reducer.js","Store/Store.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","reactstrap_es","color","light","expand","href","onClick","navbar","className","Link","to","nav","inNavbar","caret","right","divider","React","Component","Services_OmdbServices","apiKey","imdb","require","movieTitle","get","name","timeout","movieID","id","searchTerm","search","Services_FirebaseServices","FirebaseServices","config","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initialize","db","firebase","movie","seen","ref","title","set","once","Search","_React$Component","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","concat","selectMovie","OmdbServices","getMovieById","imdbid","then","selected","toggleModal","modal","addToList","addMovieToDataBase","inherits","createClass","key","value","results","_this2","displayResults","react","map","index","src","poster","alt","year","onSubmit","event","preventDefault","searchMovies","movies","style","maxWidth","type","placeholder","onChange","target","plot","loadMovies","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","getMovies","payload","val","t0","stop","_x","List","filterList","updatedList","values","filter","item","toLowerCase","items","list","_this3","movieList","position","width","height","fontSize","toWatchList","display","seenList","setList","data","size","connect","bindActionCreators","App","Navigation_Navigation","Switch","Route","exact","path","component","Redirect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","rootReducer","undefined","action","objectSpread","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","basename","process","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.33fade6a.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from 'reactstrap';\nimport { Link } from \"react-router-dom\";\n\nexport default class Navigation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"light\" light expand=\"md\">\n                    <NavbarBrand href=\"/\">movie-list</NavbarBrand>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <Link to='/movie-list/movieList' className='nav-link'>My Movies</Link>\n                            </NavItem>\n                            <NavItem>\n                                <Link to='/movie-list/search' className='nav-link'>Search</Link>\n                            </NavItem>\n                            <UncontrolledDropdown nav inNavbar>\n                                <DropdownToggle nav caret>\n                                    Options\n                                </DropdownToggle>\n                                <DropdownMenu right>\n                                    <DropdownItem>\n                                        Option 1\n                                    </DropdownItem>\n                                    <DropdownItem>\n                                        Option 2\n                                    </DropdownItem>\n                                    <DropdownItem divider/>\n                                    <DropdownItem>\n                                        Reset\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledDropdown>\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}","class OmdbServices {\n    apiKey = \"d52d4b2d\";\n    imdb = require('imdb-api');\n\n    getMovieByName(movieTitle) {\n        return this.imdb.get({name: movieTitle}, {apiKey: this.apiKey, timeout: 30000});\n    }\n\n    getMovieById(movieID) {\n        return this.imdb.get({id: movieID}, {apiKey: this.apiKey});\n    }\n\n    searchMovies(searchTerm) {\n        return this.imdb.search({name: searchTerm}, {apiKey: this.apiKey});\n    }\n\n}\n\nexport default new OmdbServices();","import * as firebase from \"firebase\";\n\nclass FirebaseServices {\n    config = {\n        apiKey: \"AIzaSyBfzmtoPfA9zIfoyyGxyqRF3zaIoyI2MUM\",\n        authDomain: \"movielist-909a6.firebaseapp.com\",\n        databaseURL: \"https://movielist-909a6.firebaseio.com\",\n        projectId: \"movielist-909a6\",\n        storageBucket: \"movielist-909a6.appspot.com\",\n        messagingSenderId: \"545170456229\"\n    };\n    db;\n\n    constructor() {\n        this.initialize();\n        this.db = firebase.database();\n    }\n\n    initialize() {\n        firebase.initializeApp(this.config);\n    }\n\n    addMovieToDataBase(movie, seen) {\n        movie.seen = seen || false;\n        return this.db.ref('/movies/' + movie.title).set(movie);\n    }\n\n    getMovies() {\n        return this.db.ref('/movies/').once('value');\n    }\n\n}\n\nexport default new FirebaseServices()","import * as React from 'react';\nimport OmdbServices from \"../Services/OmdbServices\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardImg,\n    CardSubtitle,\n    CardText,\n    CardTitle,\n    Form,\n    FormGroup,\n    Input,\n    Modal, ModalBody, ModalFooter, ModalHeader\n} from \"reactstrap\";\nimport FirebaseServices from \"../Services/FirebaseServices\";\n\n\nexport class Search extends React.Component<> {\n\n    componentWillMount() {\n        //OmdbServices.getMovieByName('Clash of The Titans').then(m => FirebaseServices.addMovieToDataBase(m));\n        this.setState({\n            results: [],\n            selected: {},\n            modal: false\n        });\n    }\n\n    selectMovie = (movie) => {\n        OmdbServices.getMovieById(movie.imdbid).then((movie) => {\n            this.setState({\n                selected: movie\n            });\n            this.toggleModal();\n        });\n    };\n\n    toggleModal = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    addToList = (seen) => {\n        FirebaseServices.addMovieToDataBase(this.state.selected, seen).then(\n            () => {\n                this.toggleModal()\n            }\n        );\n    };\n\n    render() {\n        let searchTerm = \"\";\n        const handleChange = (event) => {\n            searchTerm = event.target.value;\n        };\n        const handleSubmit = (event) => {\n            event.preventDefault();\n            OmdbServices.searchMovies(searchTerm).then((movies) => {\n                this.setState({results: movies.results});\n            });\n        };\n        const displayResults = (\n            <div className=\"row\">\n                {\n                    this.state.results.map((movie, index) => {\n                            return (\n                                <div key={index} className=\"col-lg-2 col-md-4 col-sm-8 m-4 rounded\">\n                                    <Card onClick={this.selectMovie.bind(this, movie)}>\n                                        <CardImg\n                                            src={movie.poster}\n                                            alt={movie.title}/>\n                                        <CardBody>\n                                            <CardTitle>{movie.title}</CardTitle>\n                                            <CardSubtitle>{movie.year}</CardSubtitle>\n                                        </CardBody>\n                                    </Card>\n                                </div>\n                            )\n                        }\n                    )\n                }\n            </div>\n        );\n\n        return (\n            <div>\n                <Form onSubmit={handleSubmit}>\n                    <FormGroup>\n                        <Input style={{maxWidth: '400px'}} type=\"text\" name=\"search\"\n                               placeholder=\"Search Key...\" onChange={handleChange}/>\n                    </FormGroup>\n                </Form>\n                {displayResults}\n                <div>\n                    {/*<Button className='hidden' color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button>*/}\n                    <Modal isOpen={this.state.modal} toggle={this.toggleModal} className={this.props.className}>\n                        <ModalHeader\n                            toggle={this.toggleModal}>{this.state.selected.title + \"  (\" + this.state.selected.year + \")\"}</ModalHeader>\n                        <ModalBody>\n                            {this.state.selected.plot}\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"success\" onClick={this.addToList.bind(this, true)}>SEEN IT!!</Button>\n                            {' '}\n                            <Button color=\"primary\" onClick={this.addToList.bind(this, false)}>Add To List</Button>\n                            {' '}\n                            <Button color=\"secondary\" onClick={this.toggleModal}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n\n}","import { LOAD_MOVIES } from \"./Constants\";\nimport FirebaseServices from \"../Services/FirebaseServices\";\n\n\nexport const loadMovies = () => {\n    return async (dispatch) => {\n        try {\n            await FirebaseServices.getMovies().then((movies) =>\n                dispatch({type: LOAD_MOVIES, payload: movies.val()}));\n        } catch (err) {\n            dispatch({type: LOAD_MOVIES, payload: []});\n        }\n    }\n};","export const LOAD_MOVIES = \"LAOD_MOVIES\";","import * as React from \"react\";\nimport OmdbServices from \"../Services/OmdbServices\";\nimport FirebaseServices from \"../Services/FirebaseServices\";\nimport { connect } from \"react-redux\";\nimport { loadMovies } from \"../Store/Actions\";\nimport { bindActionCreators } from 'redux';\nimport {\n    Card, CardImg, CardBody,\n    CardTitle, CardSubtitle, Badge, Form, Input, Button, ButtonGroup, Modal, ModalHeader, ModalBody, ModalFooter\n} from 'reactstrap';\n\n\nclass List extends React.Component<> {\n    componentWillMount() {\n        this.setState({\n            items: null, list: 'list', selected: {},\n            modal: false\n        });\n        this.props.getMovies().then(() => {\n            this.setState({\n                items: Object.values(this.props.movies)\n            });\n        });\n    }\n\n    filterList = (event) => {\n        let updatedList = Object.values(this.props.movies);\n        updatedList = updatedList.filter((item) => {\n            return item.title.toLowerCase().search(\n                event.target.value.toLowerCase()) !== -1;\n        });\n        this.setState({items: updatedList});\n    };\n\n    selectMovie = (movie) => {\n        OmdbServices.getMovieById(movie.imdbid).then((movie) => {\n            this.setState({\n                selected: movie\n            });\n            this.toggleModal();\n        });\n    };\n\n    addToList = (seen) => {\n        FirebaseServices.addMovieToDataBase(this.state.selected, seen).then(\n            () => {\n                this.toggleModal();\n                this.props.getMovies().then(() => {\n                    this.setState({\n                        items: Object.values(this.props.movies)\n                    });\n                });\n            }\n        );\n\n    };\n\n    toggleModal = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    render() {\n        const movieList = this.state.items && this.state.items.map((movie, index) => {\n            return (\n                <div key={index} className=\"col-lg-2 col-md-4 col-sm-8 m-4 rounded\">\n                    <Card onClick={this.selectMovie.bind(this, movie)}>\n                        {movie.seen ? <Badge style={{\n                            position: \"absolute\",\n                            width: \"100%\",\n                            height: \"6%\",\n                            fontSize: \"100%\"\n                        }} color=\"success\">Watched</Badge> : null}\n                        <CardImg\n                            src={movie.poster}\n                            alt={movie.title}/>\n                        <CardBody>\n                            <CardTitle>{movie.title}</CardTitle>\n                            <CardSubtitle>{movie.year}</CardSubtitle>\n                        </CardBody>\n                    </Card>\n                </div>\n            );\n        });\n\n        const toWatchList = this.state.items && this.state.items.map((movie, index) => {\n            if (movie.seen) {\n                return <div key={index} style={{display: 'none'}}/>;\n            } else {\n                return (\n                    <div key={index} className=\"col-lg-2 col-md-4 col-sm-8 m-4 rounded\">\n                        <Card onClick={this.selectMovie.bind(this, movie)}>\n                            <CardImg\n                                src={movie.poster}\n                                alt={movie.title}/>\n                            <CardBody>\n                                <CardTitle>{movie.title}</CardTitle>\n                                <CardSubtitle>{movie.year}</CardSubtitle>\n                            </CardBody>\n                        </Card>\n                    </div>\n                );\n            }\n        });\n\n        const seenList = this.state.items && this.state.items.map((movie, index) => {\n            if (!movie.seen) {\n                return <div key={index} style={{display: 'none'}}/>;\n            } else {\n                return (\n                    <div key={index} className=\"col-lg-2 col-md-4 col-sm-8 m-4 rounded\">\n                        <Card onClick={this.selectMovie.bind(this, movie)}>\n                            <Badge style={{\n                                position: \"absolute\",\n                                width: \"100%\",\n                                height: \"6%\",\n                                fontSize: \"100%\"\n                            }} color=\"success\">Watched</Badge>\n                            <CardImg\n                                src={movie.poster}\n                                alt={movie.title}/>\n                            <CardBody>\n                                <CardTitle>{movie.title}</CardTitle>\n                                <CardSubtitle>{movie.year}</CardSubtitle>\n                            </CardBody>\n                        </Card>\n                    </div>\n                );\n            }\n        });\n\n        const setList = (data) => {\n            this.setState(data);\n        };\n\n        debugger;\n        return (\n            <div>\n                <Form>\n                    <Input style={{maxWidth: '400px'}} type=\"text\" placeholder=\"Filter...\"\n                           onChange={this.filterList.bind(this)}/>\n                </Form>\n                <ButtonGroup size=\"lg\">\n                    <Button onClick={setList.bind(this, {list: 'list'})}>Movie List</Button>\n                    <Button onClick={setList.bind(this, {list: 'seen'})}>Seen List</Button>\n                    <Button onClick={setList.bind(this, {list: 'toWatch'})}>To Watch List</Button>\n                </ButtonGroup>\n                <div className=\"row\">\n                    {this.state.list === 'list' ? movieList : null}\n                    {this.state.list === 'toWatch' ? toWatchList : null}\n                    {this.state.list === 'seen' ? seenList : null}\n                </div>\n                <div>\n                    {/*<Button className='hidden' color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button>*/}\n                    <Modal isOpen={this.state.modal} toggle={this.toggleModal} className={this.props.className}>\n                        <ModalHeader\n                            toggle={this.toggleModal}>{this.state.selected.title + \"  (\" + this.state.selected.year + \")\"}</ModalHeader>\n                        <ModalBody>\n                            {this.state.selected.plot}\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"success\" onClick={this.addToList.bind(this, true)}>SEEN IT!!</Button>\n                            {' '}\n                            <Button color=\"secondary\" onClick={this.toggleModal}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        movies: state.movies\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getMovies: bindActionCreators(loadMovies, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List)","import React from 'react';\nimport './App.css';\nimport Navigation from './Pages/Navigation'\nimport { Search } from \"./Pages/Search\";\nimport { Redirect, Route, Switch } from 'react-router';\nimport List from './Pages/List';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Navigation/>\n                <Switch>\n                    <Route exact path=\"/movie-list/movieList\" component={List}/>\n                    <Route exact path=\"/movie-list/search\" component={Search}/>\n                    <Redirect to='/movie-list/movieList'/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOAD_MOVIES } from \"./Constants\";\n\nconst initialState = {\n    movies: {}\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD_MOVIES:\n            return {...state, movies: action.payload};\n        default:\n            return state;\n    }\n};\nexport default rootReducer;","import rootReducer from \"./Reducer\";\nimport { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from \"react-redux\";\nimport store from \"./Store/Store\";\nimport { BrowserRouter } from 'react-router-dom'\n\nconst basename = `${process.env.PUBLIC_URL}`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={basename}>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}